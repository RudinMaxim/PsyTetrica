-- user 
create table users (
    id bigint generated by default as identity,
    username text not null,
    email text not null,
    password text not null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp without time zone null default now(),
    banned boolean null default false,
    verification boolean null default false,
    date_of_birth timestamp with time zone null default now(),
    description text null,
    constraint users_pkey primary key (id),
    constraint users_email_key unique (email)
);
create table role (
    id bigint generated by default as identity,
    name text null,
    constraint role_pkey primary key (id)
);
create table user_role (
    user_id bigint not null,
    role_id bigint not null,
    constraint user_role_pkey primary key (user_id, role_id),
    constraint user_role_role_id_fkey foreign key (role_id) references role (id),
    constraint user_role_user_id_fkey foreign key (user_id) references users (id)
);
-- post
create table posts (
    id bigint generated by default as identity,
    title text not null,
    content text not null,
    created_at timestamp with time zone null default current_timestamp,
    updated_at timestamp with time zone null default current_timestamp,
    constraint posts_pkey primary key (id)
);
create table comments (
    id serial,
    post_id integer null,
    user_id integer null,
    content text null,
    created_at timestamp without time zone null default current_timestamp,
    constraint comments_pkey primary key (id),
    constraint comments_post_id_fkey foreign key (post_id) references posts (id),
    constraint comments_user_id_fkey foreign key (user_id) references users (id)
);
create table likes (
    id serial,
    post_id integer null,
    user_id integer null,
    created_at timestamp without time zone null default current_timestamp,
    constraint likes_pkey primary key (id),
    constraint likes_post_id_fkey foreign key (post_id) references posts (id),
    constraint likes_user_id_fkey foreign key (user_id) references users (id)
);
create table user_post (
    post_id bigint not null,
    user_id bigint not null,
    constraint user_post_pkey primary key (post_id, user_id),
    constraint user_post_post_id_fkey foreign key (post_id) references posts (id),
    constraint user_post_user_id_fkey foreign key (user_id) references users (id)
);
-- categories
create table categories (
    id serial,
    name character varying(255) not null,
    constraint categories_pkey primary key (id)
);
create table subcategories (
    id serial,
    name character varying(255) not null,
    category_id integer not null,
    constraint subcategories_pkey primary key (id),
    constraint subcategories_category_id_fkey foreign key (category_id) references categories (id)
);
create table user_category (
    user_id bigint not null,
    category_id integer not null,
    subcategory_id integer not null,
    constraint user_category_pkey primary key (user_id, category_id, subcategory_id),
    constraint user_category_category_id_fkey foreign key (category_id) references categories (id),
    constraint user_category_subcategory_id_fkey foreign key (subcategory_id) references subcategories (id),
    constraint user_category_user_id_fkey foreign key (user_id) references users (id)
);