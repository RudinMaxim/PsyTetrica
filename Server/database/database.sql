-- user 
create table users (
    id bigint generated by default as identity,
    username text not null,
    email text not null,
    password text not null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp without time zone null default now(),
    banned boolean null default false,
    --     verification boolean null default false,
    description text null,
    constraint users_pkey primary key (id),
    constraint users_email_key unique (email)
);
create table role (
    id bigint generated by default as identity,
    name text null,
    constraint role_pkey primary key (id)
);
create table user_role (
    user_id bigint not null,
    role_id bigint not null,
    constraint user_role_pkey primary key (user_id, role_id),
    constraint user_role_role_id_fkey foreign key (role_id) references role (id),
    constraint user_role_user_id_fkey foreign key (user_id) references users (id)
);
-- create table email_verification {
--     id bigserial,
--     username text not null,
--     email text not null,
--     secret_code text not null,
--     is_using bool not null default false,
--     created_at timestamp with time zone null default now(),
--     expired_at timestamp with time zone null default now(),
--     constraint email_verification_pkey primary key (id),
--     constraint email_verification_username_fkey foreign key (username) references users (username)
-- }
CREATE TABLE psychologists (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    bio TEXT,
    education Text,
    experiance INTEGER,
    FOREIGN KEY (user_id) REFERENCES users(id) constraint user_id_key unique (user_id)
);
CREATE TABLE specializations (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255)
);
CREATE TABLE approaches (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255)
);
CREATE TABLE therapy_types (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255)
);
CREATE TABLE psychologist_specializations (
    psychologist_id INTEGER,
    specialization_id INTEGER,
    FOREIGN KEY (psychologist_id) REFERENCES psychologists(id),
    FOREIGN KEY (specialization_id) REFERENCES specializations(id)
);
CREATE TABLE psychologist_approaches (
    psychologist_id INTEGER,
    approach_id INTEGER,
    FOREIGN KEY (psychologist_id) REFERENCES psychologists(id),
    FOREIGN KEY (approach_id) REFERENCES approaches(id)
);
CREATE TABLE psychologist_prices (
    psychologist_id INTEGER,
    therapy_type_id INTEGER,
    price DECIMAL,
    FOREIGN KEY (psychologist_id) REFERENCES psychologists(id),
    FOREIGN KEY (therapy_type_id) REFERENCES therapy_types(id)
);
CREATE TABLE psychologist_therapy_types (
    psychologist_id INTEGER,
    therapy_type_id INTEGER,
    FOREIGN KEY (psychologist_id) REFERENCES psychologists(id),
    FOREIGN KEY (therapy_type_id) REFERENCES therapy_types(id)
);
-- categories
create table categories (
    id serial,
    name character varying(255) not null,
    constraint categories_pkey primary key (id)
);
create table subcategories (
    id serial,
    name character varying(255) not null,
    category_id integer not null,
    constraint subcategories_pkey primary key (id),
    constraint subcategories_category_id_fkey foreign key (category_id) references categories (id)
);
create table user_category (
    user_id bigint not null,
    category_id integer not null,
    subcategory_id integer not null,
    constraint user_category_pkey primary key (user_id, category_id, subcategory_id),
    constraint user_category_category_id_fkey foreign key (category_id) references categories (id),
    constraint user_category_subcategory_id_fkey foreign key (subcategory_id) references subcategories (id),
    constraint user_category_user_id_fkey foreign key (user_id) references users (id)
);